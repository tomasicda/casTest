#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('VLBC:server');
var http = require('http');



// var duino = require( 'iotduino'),
//     pinMode = duino.PinMode, pinState = duino.PinState,
//     pins = duino.Pins, ledPin = pins.GPIO13;
//
// // pin 13 (GPIO13) is set as OUTPUT
// duino.pinMode( ledPin, pinMode.OUTPUT);
// // repeat every 500 milliseconds, 2 times per second
// setInterval( function () {
//   // alternate the pin state between HIGH and LOW
//   duino.digitalWrite( ledPin, !duino.digitalRead( ledPin));
// }, 500);



/**
  Testing i2c library
 */

// var i2c = require('i2c-bus'),
//     i2c1;
//
// var ADDR = 0x20;
//
// i2c1 = i2c.open(1, function (err) {
//   if (err) throw err;
//
//   (function readId() {
//     i2c1.readByte(ADDR, function (err, id) {
//       if (err) throw err;
//       console.log(id);
//       readId();
//     });
//   }());
// });



/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8080');
mongoURI = 'mongodb://localhost/vlbc';
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */


server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}




/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
